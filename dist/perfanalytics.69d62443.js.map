{"version":3,"sources":["index.js"],"names":["fcp","ttfb","windowLoad","domLoad","api","url","window","location","href","performanceTiming","performance","toJSON","timing","currentTime","Date","valueOf","convertMsToSecond","ms","startObserver","PerformanceObserver","entryList","getEntriesByName","startTime","observe","type","buffered","console","error","sendRequest","request","setInterval","data","timeOrigin","log","options","method","headers","body","JSON","stringify","fetch","then","response","debug","clearInterval","displayResources","resources","getEntriesByType","forEach","resource","name","initiatorType","responseEnd","responseStart","requestStart","fetchStart","getPerformanceTiming","navigationStart","domContentLoadedEventEnd","addEventListener"],"mappings":"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","file":"perfanalytics.69d62443.js","sourceRoot":"../example","sourcesContent":["// Variables\nconst api = 'http://localhost:8000/metrics'\nconst url = window.location.href\nconst performanceTiming = window.performance.toJSON().timing\nconst currentTime = new Date().valueOf()\nvar fcp, ttfb, windowLoad, domLoad\n\n// Converting ms to seconds\nconst convertMsToSecond = (ms) => {\n    return (ms / 1000)\n}\n\n// FCP metric to observe (https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver)\nconst startObserver = () => {\n    if (typeof PerformanceObserver !== 'function') {\n        console.error(\"PerfanalyticsJS Error : PerformanceObserver NOT supported!\")\n        return\n    }\n\n    let observer = new PerformanceObserver((entryList) => {\n        fcp = convertMsToSecond(entryList.getEntriesByName('first-contentful-paint')[0].startTime)\n    })\n\n    observer.observe({ type: 'paint', buffered: true })\n}\n\n\nconst sendRequest = () => {\n    const request = setInterval(() => {\n        let data = {\n            \"url\": url,\n            \"date\": performance.timeOrigin,\n            \"ttfb\": ttfb, // Time to first byte\n            \"fcp\": fcp, // First contentful paint\n            \"domLoad\": domLoad,\n            \"windowLoad\": windowLoad,\n        }\n\n        console.log(\"PerfanalyticsJS Request Object : \", data)\n\n        const options = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data),\n        }\n\n        fetch(api, options).then((response) => console.debug(response))\n\n        clearInterval(request)\n    }, 500) // This interval has been set because the PerformanceObserver runs after the window is loaded\n}\n\n// Retrieving and analysing of detailed network timing data regarding the loading of an application's resources\nconst displayResources = () => {\n    if (!window.performance) {\n        console.error(\"PerfanalyticsJS Error : Performance NOT supported!\")\n        return\n    }\n\n    var resources = window.performance.getEntriesByType('resource')\n\n    console.log(\"PerfanalyticsJS Resource Data : \")\n\n    resources.forEach((resource) => {\n        console.log(\"Resource - Name : \" + resource.name + \" | Type : \" + resource.initiatorType)\n        console.log(\"-- Response time = \" + convertMsToSecond(resource.responseEnd - resource.responseStart))\n        console.log(\"-- Request start until response end time = \" + convertMsToSecond((resource.requestStart > 0) ? (resource.responseEnd - resource.requestStart) : \"0\"))\n        console.log(\"-- Fetch until response end time = \" + convertMsToSecond((resource.fetchStart > 0) ? (resource.responseEnd - resource.fetchStart) : \"0\"))\n        console.log(\"-- Start until response end time = \" + convertMsToSecond((resource.startTime > 0) ? (resource.responseEnd - resource.startTime) : \"0\"))\n    })\n}\n\n// Calculating performance-related information for the current page\nconst getPerformanceTiming = () => {\n    if (!performanceTiming) {\n        console.error(\"PerfanalyticsJS Error : Performance NOT supported!\")\n        return\n    }\n\n    ttfb = convertMsToSecond(performanceTiming.responseStart - performanceTiming.navigationStart)\n    domLoad = convertMsToSecond(performanceTiming.domContentLoadedEventEnd - performanceTiming.navigationStart)\n    windowLoad = convertMsToSecond(currentTime - performanceTiming.navigationStart)\n}\n\nwindow.addEventListener('load', () => {\n    startObserver()\n    getPerformanceTiming()\n    displayResources()\n    sendRequest()\n})"]}