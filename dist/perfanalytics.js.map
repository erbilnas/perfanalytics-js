{"version":3,"sources":["index.js"],"names":["fcp","ttfb","windowLoad","domLoad","api","url","window","location","href","currentDate","Date","valueOf","performanceTiming","performance","toJSON","timing","convertMsToSecond","ms","startObserver","PerformanceObserver","entryList","getEntriesByName","startTime","observe","type","buffered","sendRequest","request","setInterval","data","timeOrigin","console","log","options","method","headers","body","JSON","stringify","fetch","then","response","clearInterval","addEventListener","responseStart","navigationStart","domContentLoadedEventEnd"],"mappings":";AAAA,IAIIA,EAAKC,EAAMC,EAAYC,EAJrBC,EAAM,gCACNC,EAAMC,OAAOC,SAASC,KACtBC,GAAc,IAAIC,MAAOC,UACzBC,EAAoBN,OAAOO,YAAYC,SAASC,OAGhDC,EAAoB,SAACC,GAAiBA,OAAAA,EAAK,KAE3CC,EAAgB,WACiB,mBAAxBC,qBACI,IAAIA,oBAAoB,SAACC,GACpCpB,EAAMgB,EAAkBI,EAAUC,iBAAiB,0BAA0B,GAAGC,aAE3EC,QAAQ,CAAEC,KAAM,QAASC,UAAU,KAG1CC,EAAc,WACVC,IAAAA,EAAUC,YAAY,WACpBC,IAAAA,EAAO,CACAxB,IAAAA,EACCK,KAAAA,KAAKG,YAAYiB,YAAYnB,UAC7BV,KAAAA,EACDD,IAAAA,EACIG,QAAAA,EACGD,WAAAA,GAElB6B,QAAQC,IAAI,0BAA2BH,GACjCI,IAAAA,EAAU,CACZC,OAAQ,OACRC,QAAS,CAAkB,eAAA,oBAC3BC,KAAMC,KAAKC,UAAUT,IAEzBU,MAAMnC,EAAK6B,GAASO,KAAK,SAACC,GAAaV,OAAAA,QAAQC,IAAIS,KACnDC,cAAcf,IACf,MAGPrB,OAAOqC,iBAAiB,OAAQ,YACvBrC,QAAWA,OAAOO,eACvBZ,EAAOe,EAAkBJ,EAAkBgC,cAAgBhC,EAAkBiC,iBAC7E1C,EAAUa,EAAkBJ,EAAkBkC,yBAA2BlC,EAAkBiC,iBAC3F3C,EAAac,EAAkBP,EAAcG,EAAkBiC,iBAC/D3B,IACAQ","file":"perfanalytics.js","sourceRoot":"../src","sourcesContent":["const api = 'http://localhost:8000/metrics'\nconst url = window.location.href\nconst currentDate = new Date().valueOf()\nconst performanceTiming = window.performance.toJSON().timing\nvar fcp, ttfb, windowLoad, domLoad\n\nconst convertMsToSecond = (ms) => { return (ms / 1000) }\n\nconst startObserver = () => {\n    if (typeof PerformanceObserver !== 'function') return\n    let observer = new PerformanceObserver((entryList) => {\n        fcp = convertMsToSecond(entryList.getEntriesByName('first-contentful-paint')[0].startTime)\n    })\n    observer.observe({ type: 'paint', buffered: true })\n}\n\nconst sendRequest = () => {\n    const request = setInterval(() => {\n        let data = {\n            \"url\": url,\n            \"date\": Date(performance.timeOrigin).valueOf(),\n            \"ttfb\": ttfb,\n            \"fcp\": fcp,\n            \"domLoad\": domLoad,\n            \"windowLoad\": windowLoad,\n        }\n        console.log(\"Perfanalytics Object : \", data)\n        const options = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data),\n        }\n        fetch(api, options).then((response) => console.log(response))\n        clearInterval(request)\n    }, 500)\n}\n\nwindow.addEventListener('load', () => {\n    if (!window && !window.performance) return\n    ttfb = convertMsToSecond(performanceTiming.responseStart - performanceTiming.navigationStart)\n    domLoad = convertMsToSecond(performanceTiming.domContentLoadedEventEnd - performanceTiming.navigationStart)\n    windowLoad = convertMsToSecond(currentDate - performanceTiming.navigationStart)\n    startObserver()\n    sendRequest()\n})"]}