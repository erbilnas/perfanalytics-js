{"version":3,"sources":["index.js"],"names":["fcp","ttfb","windowLoad","domLoad","api","url","window","location","href","performanceTiming","performance","toJSON","timing","currentTime","Date","valueOf","convertMsToSecond","ms","startObserver","PerformanceObserver","entryList","getEntriesByName","startTime","observe","type","buffered","console","error","sendRequest","request","setInterval","data","timeOrigin","log","options","method","headers","body","JSON","stringify","fetch","then","response","debug","clearInterval","displayResources","resources","getEntriesByType","forEach","resource","name","initiatorType","responseEnd","responseStart","requestStart","fetchStart","getPerformanceTiming","navigationStart","domContentLoadedEventEnd","addEventListener"],"mappings":";AACA,IAIIA,EAAKC,EAAMC,EAAYC,EAJrBC,EAAM,4CACNC,EAAMC,OAAOC,SAASC,KACtBC,EAAoBH,OAAOI,YAAYC,SAASC,OAChDC,GAAc,IAAIC,MAAOC,UAIzBC,EAAoB,SAACC,GACfA,OAAAA,EAAK,KAIXC,EAAgB,WACiB,mBAAxBC,oBAKI,IAAIA,oBAAoB,SAACC,GACpCpB,EAAMgB,EAAkBI,EAAUC,iBAAiB,0BAA0B,GAAGC,aAG3EC,QAAQ,CAAEC,KAAM,QAASC,UAAU,IARxCC,QAAQC,MAAM,+DAYhBC,EAAc,WACVC,IAAAA,EAAUC,YAAY,WACpBC,IAAAA,EAAO,CACA1B,IAAAA,EACCK,KAAAA,YAAYsB,WACZ/B,KAAAA,EACDD,IAAAA,EACIG,QAAAA,EACGD,WAAAA,GAGlBwB,QAAQO,IAAI,oCAAqCF,GAE3CG,IAAAA,EAAU,CACZC,OAAQ,OACRC,QAAS,CAAkB,eAAA,oBAC3BC,KAAMC,KAAKC,UAAUR,IAGzBS,MAAMpC,EAAK8B,GAASO,KAAK,SAACC,GAAahB,OAAAA,QAAQiB,MAAMD,KAErDE,cAAcf,IACf,MAIDgB,EAAmB,WACjB,GAACvC,OAAOI,YAAR,CAKAoC,IAAAA,EAAYxC,OAAOI,YAAYqC,iBAAiB,YAEpDrB,QAAQO,IAAI,oCAEZa,EAAUE,QAAQ,SAACC,GACfvB,QAAQO,IAAI,qBAAuBgB,EAASC,KAAO,aAAeD,EAASE,eAC3EzB,QAAQO,IAAI,sBAAwBjB,EAAkBiC,EAASG,YAAcH,EAASI,gBACtF3B,QAAQO,IAAI,8CAAgDjB,EAAmBiC,EAASK,aAAe,EAAML,EAASG,YAAcH,EAASK,aAAgB,MAC7J5B,QAAQO,IAAI,sCAAwCjB,EAAmBiC,EAASM,WAAa,EAAMN,EAASG,YAAcH,EAASM,WAAc,MACjJ7B,QAAQO,IAAI,sCAAwCjB,EAAmBiC,EAAS3B,UAAY,EAAM2B,EAASG,YAAcH,EAAS3B,UAAa,aAb/II,QAAQC,MAAM,uDAkBhB6B,EAAuB,WACpB/C,GAKLR,EAAOe,EAAkBP,EAAkB4C,cAAgB5C,EAAkBgD,iBAC7EtD,EAAUa,EAAkBP,EAAkBiD,yBAA2BjD,EAAkBgD,iBAC3FvD,EAAac,EAAkBH,EAAcJ,EAAkBgD,kBAN3D/B,QAAQC,MAAM,uDAStBrB,OAAOqD,iBAAiB,OAAQ,WAC5BzC,IACAsC,IACAX,IACAjB","file":"perfanalytics.js","sourceRoot":"../src","sourcesContent":["// Variables\nconst api = 'https://perfapp-api.herokuapp.com/metrics'\nconst url = window.location.href\nconst performanceTiming = window.performance.toJSON().timing\nconst currentTime = new Date().valueOf()\nvar fcp, ttfb, windowLoad, domLoad\n\n// Converting ms to seconds\nconst convertMsToSecond = (ms) => {\n    return (ms / 1000)\n}\n\n// FCP metric to observe (https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver)\nconst startObserver = () => {\n    if (typeof PerformanceObserver !== 'function') {\n        console.error(\"PerfanalyticsJS Error : PerformanceObserver NOT supported!\")\n        return\n    }\n\n    let observer = new PerformanceObserver((entryList) => {\n        fcp = convertMsToSecond(entryList.getEntriesByName('first-contentful-paint')[0].startTime)\n    })\n\n    observer.observe({ type: 'paint', buffered: true })\n}\n\n\nconst sendRequest = () => {\n    const request = setInterval(() => {\n        let data = {\n            \"url\": url,\n            \"date\": performance.timeOrigin,\n            \"ttfb\": ttfb, // Time to first byte\n            \"fcp\": fcp, // First contentful paint\n            \"domLoad\": domLoad,\n            \"windowLoad\": windowLoad,\n        }\n\n        console.log(\"PerfanalyticsJS Request Object : \", data)\n\n        const options = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data),\n        }\n\n        fetch(api, options).then((response) => console.debug(response))\n\n        clearInterval(request)\n    }, 500) // This interval has been set because the PerformanceObserver runs after the window is loaded\n}\n\n// Retrieving and analysing of detailed network timing data regarding the loading of an application's resources\nconst displayResources = () => {\n    if (!window.performance) {\n        console.error(\"PerfanalyticsJS Error : Performance NOT supported!\")\n        return\n    }\n\n    var resources = window.performance.getEntriesByType('resource')\n\n    console.log(\"PerfanalyticsJS Resource Data : \")\n\n    resources.forEach((resource) => {\n        console.log(\"Resource - Name : \" + resource.name + \" | Type : \" + resource.initiatorType)\n        console.log(\"-- Response time = \" + convertMsToSecond(resource.responseEnd - resource.responseStart))\n        console.log(\"-- Request start until response end time = \" + convertMsToSecond((resource.requestStart > 0) ? (resource.responseEnd - resource.requestStart) : \"0\"))\n        console.log(\"-- Fetch until response end time = \" + convertMsToSecond((resource.fetchStart > 0) ? (resource.responseEnd - resource.fetchStart) : \"0\"))\n        console.log(\"-- Start until response end time = \" + convertMsToSecond((resource.startTime > 0) ? (resource.responseEnd - resource.startTime) : \"0\"))\n    })\n}\n\n// Calculating performance-related information for the current page\nconst getPerformanceTiming = () => {\n    if (!performanceTiming) {\n        console.error(\"PerfanalyticsJS Error : Performance NOT supported!\")\n        return\n    }\n\n    ttfb = convertMsToSecond(performanceTiming.responseStart - performanceTiming.navigationStart)\n    domLoad = convertMsToSecond(performanceTiming.domContentLoadedEventEnd - performanceTiming.navigationStart)\n    windowLoad = convertMsToSecond(currentTime - performanceTiming.navigationStart)\n}\n\nwindow.addEventListener('load', () => {\n    startObserver()\n    getPerformanceTiming()\n    displayResources()\n    sendRequest()\n})"]}